From 873cece6d7ce0971e03b2e9d00c5ed9ffd1e7f46 Mon Sep 17 00:00:00 2001
From: bellgod00 <bellgod@curocom.com>
Date: Thu, 11 May 2023 16:11:39 +0900
Subject: [PATCH] =?UTF-8?q?20230511=20=EC=A0=95=EC=83=81=EC=83=81=ED=83=9C?=
 =?UTF-8?q?=20=EC=BB=A4=EB=B0=8B?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 build.gradle                                  | 10 ++-
 .../demo/Controller/DummyControllerTest.java  | 66 +++++++++++++++++++
 .../example/ex1/demo/DemoApplication.java     |  1 -
 .../java/example/ex1/demo/Model/Board.java    | 44 +++++++++++++
 .../java/example/ex1/demo/Model/Reply.java    | 43 ++++++++++++
 .../java/example/ex1/demo/Model/RoleType.java |  5 ++
 .../java/example/ex1/demo/Model/User.java     | 45 +++++++++++++
 .../ex1/demo/Repository/UserRepository.java   | 11 ++++
 src/main/resources/application.yml            | 18 ++++-
 src/main/webapp/WEB-INF/views/dummy.jsp       |  9 +++
 10 files changed, 247 insertions(+), 5 deletions(-)
 create mode 100644 src/main/java/example/ex1/demo/Controller/DummyControllerTest.java
 create mode 100644 src/main/java/example/ex1/demo/Model/Board.java
 create mode 100644 src/main/java/example/ex1/demo/Model/Reply.java
 create mode 100644 src/main/java/example/ex1/demo/Model/RoleType.java
 create mode 100644 src/main/java/example/ex1/demo/Model/User.java
 create mode 100644 src/main/java/example/ex1/demo/Repository/UserRepository.java
 create mode 100644 src/main/webapp/WEB-INF/views/dummy.jsp

diff --git a/build.gradle b/build.gradle
index 1feec20..71d4427 100644
--- a/build.gradle
+++ b/build.gradle
@@ -8,6 +8,11 @@ group = 'example.ex1'
 version = '0.0.1-SNAPSHOT'
 sourceCompatibility = '8'
 
+//오류: 기본 클래스 org.gradle.launcher.daemon.bootstrap.GradleDaemon을(를) 찾거나 로드할 수 없습니다.
+test {
+	maxHeapSize = "1024m"
+}
+
 configurations {
 	compileOnly {
 		extendsFrom annotationProcessor
@@ -24,14 +29,13 @@ dependencies {
 	implementation('org.springframework.boot:spring-boot-starter-web')
 	implementation('org.springframework.boot:spring-boot-starter-data-jpa')
 	implementation('mysql:mysql-connector-java:8.0.33')
-	//jsp
 	implementation('org.apache.tomcat.embed:tomcat-embed-jasper')
 	implementation('javax.servlet:jstl:1.2')
 	implementation('org.apache.tiles:tiles-jsp:3.0.8')
-	compileOnly 'org.projectlombok:lombok'
 	developmentOnly 'org.springframework.boot:spring-boot-devtools'
-	annotationProcessor 'org.projectlombok:lombok:1.14.8'
 	testImplementation 'org.springframework.boot:spring-boot-starter-test'
+	compileOnly 'org.projectlombok:lombok:1.18.26'
+	annotationProcessor 'org.projectlombok:lombok:1.18.26'
 }
 
 tasks.named('test') {
diff --git a/src/main/java/example/ex1/demo/Controller/DummyControllerTest.java b/src/main/java/example/ex1/demo/Controller/DummyControllerTest.java
new file mode 100644
index 0000000..d6a5826
--- /dev/null
+++ b/src/main/java/example/ex1/demo/Controller/DummyControllerTest.java
@@ -0,0 +1,66 @@
+package example.ex1.demo.Controller;
+
+import example.ex1.demo.Model.RoleType;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.PathVariable;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+import example.ex1.demo.Model.User;
+import example.ex1.demo.Repository.UserRepository;
+import lombok.extern.slf4j.Slf4j;
+
+import java.util.function.Supplier;
+
+@Slf4j
+@RestController
+public class DummyControllerTest {
+
+    @Autowired // 의존성 주입(DI)
+    private UserRepository userRepository;
+
+    @PostMapping("/dumy/join")
+    public String join(User user) {
+        log.debug("id = " + user.getId());
+        log.debug("username = " + user.getUsername());
+        log.debug("password = " + user.getPasswd());
+        log.debug("email = " + user.getEmail());
+        log.debug("role = " + user.getRole());
+        log.debug("createDate = " + user.getCreateDate());
+
+        user.setRole(RoleType.USER);
+        log.debug("userRepository 실행");
+        userRepository.save(user);
+
+        return "회원가입이 완료되었습니다.";
+    }
+
+    //{id} 주소로 파마메터를 전달 받을 수 있음.
+    //http://localhost:8000/blog/dumy/user/3
+    @GetMapping("/dumy/user/{id}")
+    public User detail(@PathVariable int id) {
+        log.debug("User detail Call");
+//        //user/4를 찾으면 내가 DB에서 못 찾아오게 되면 user가 null
+//        //그럼 return이 null 해서 Optional로 싸서 return여부 판단.
+//        User user = userRepository.findById(id).orElseGet(new Supplier<User>() {
+//            @Override
+//            public User get() {
+//                return new User();
+//            }
+//        });
+        User user = userRepository.findById(id).orElseThrow(new Supplier<IllegalArgumentException>(){
+            @Override
+            public IllegalArgumentException get() {
+                return new IllegalArgumentException("해당 유저는 없습니다.id"+id);
+                //Thu May 11 17:56:34 KST 2023
+                //There was an unexpected error (type=Internal Server Error, status=500).
+                //해당 유저는 없습니다.id4
+            }
+        });
+
+        return user;
+        //{"id":2,"username":"hong","passwd":"1234","email":"hong@nate.com","role":"USER","createDate":"2023-05-11T08:40:57.933+00:00"}
+    }
+
+}
diff --git a/src/main/java/example/ex1/demo/DemoApplication.java b/src/main/java/example/ex1/demo/DemoApplication.java
index a568e16..b0289c5 100644
--- a/src/main/java/example/ex1/demo/DemoApplication.java
+++ b/src/main/java/example/ex1/demo/DemoApplication.java
@@ -5,7 +5,6 @@ import org.springframework.boot.autoconfigure.SpringBootApplication;
 
 @SpringBootApplication
 public class DemoApplication {
-
 	public static void main(String[] args) {
 		SpringApplication.run(DemoApplication.class, args);
 	}
diff --git a/src/main/java/example/ex1/demo/Model/Board.java b/src/main/java/example/ex1/demo/Model/Board.java
new file mode 100644
index 0000000..08f6a2c
--- /dev/null
+++ b/src/main/java/example/ex1/demo/Model/Board.java
@@ -0,0 +1,44 @@
+package example.ex1.demo.Model;
+
+import lombok.Builder;
+import org.hibernate.annotations.ColumnDefault;
+import org.hibernate.annotations.CreationTimestamp;
+
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import javax.persistence.*;
+import java.sql.Timestamp;
+import java.util.List;
+
+@Data // Getter Setter
+@NoArgsConstructor // 아규먼트 없는 생성자 생성
+@AllArgsConstructor // 전체 아규먼트 생성자 생성
+@Builder // 빌더 패턴
+@Entity
+public class Board {
+    @Id
+    // PK
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private int id;
+
+    @Column(nullable = false, length = 100)
+    private String title;
+
+    @Lob
+    private String content; // 섬머노트 라이브러리 <html>태그가 섞여서 디자인이 됨.
+
+    @ColumnDefault("0")
+    private int count; // 조회수
+
+    @ManyToOne(fetch = FetchType.EAGER) // Many = Board, User = One
+    @JoinColumn(name = "userId")
+    private User user; // DB는 Object를 저장할 수 없다. FK,자바는 Object를 저장할 수 있다.
+
+    @OneToMany(mappedBy = "board", fetch = FetchType.EAGER) // mappedBy 연관관계의 주인이 아니다.(난 FK가 아니예요) DB에 컬럼 만들지 X
+    private List<Reply> reply;
+
+    @CreationTimestamp
+    private Timestamp createDate;
+}
diff --git a/src/main/java/example/ex1/demo/Model/Reply.java b/src/main/java/example/ex1/demo/Model/Reply.java
new file mode 100644
index 0000000..6a52e2a
--- /dev/null
+++ b/src/main/java/example/ex1/demo/Model/Reply.java
@@ -0,0 +1,43 @@
+package example.ex1.demo.Model;
+
+import java.sql.Timestamp;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.GenerationType;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+
+import lombok.Builder;
+import org.hibernate.annotations.CreationTimestamp;
+
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@Data // Getter Setter
+@NoArgsConstructor // 아규먼트 없는 생성자 생성
+@AllArgsConstructor // 전체 아규먼트 생성자 생성
+@Builder // 빌더 패턴
+@Entity // User class가 MySQL에 테이블이 생성이 된다.
+public class Reply {
+    @Id
+    // PK
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private int id;
+
+    @Column(nullable = false, length = 200)
+    private String content;
+
+    @ManyToOne // Many = Board, User = One
+    @JoinColumn(name = "boardId")
+    private Board board; // DB는 Object를 저장할 수 없다. FK,자바는 Object를 저장할 수 있다.
+
+    @ManyToOne
+    @JoinColumn(name = "userId")
+    private User user;
+
+    @CreationTimestamp
+    private Timestamp createDate;
+}
diff --git a/src/main/java/example/ex1/demo/Model/RoleType.java b/src/main/java/example/ex1/demo/Model/RoleType.java
new file mode 100644
index 0000000..37e13a4
--- /dev/null
+++ b/src/main/java/example/ex1/demo/Model/RoleType.java
@@ -0,0 +1,5 @@
+package example.ex1.demo.Model;
+
+public enum RoleType {
+    USER,ADMIN
+}
diff --git a/src/main/java/example/ex1/demo/Model/User.java b/src/main/java/example/ex1/demo/Model/User.java
new file mode 100644
index 0000000..3d0ed00
--- /dev/null
+++ b/src/main/java/example/ex1/demo/Model/User.java
@@ -0,0 +1,45 @@
+package example.ex1.demo.Model;
+
+import lombok.Builder;
+import org.hibernate.annotations.ColumnDefault;
+import org.hibernate.annotations.CreationTimestamp;
+
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import org.hibernate.annotations.DynamicInsert;
+
+import javax.persistence.*;
+import java.sql.Timestamp;
+
+@Data // Getter Setter
+@NoArgsConstructor // 아규먼트 없는 생성자 생성
+@AllArgsConstructor // 전체 아규먼트 생성자 생성
+@Builder// 빌더 패턴
+@Entity // User class가 MySQL에 테이블이 생성이 된다.
+//@DynamicInsert //null인 값은 Insert를 하지 않는다.
+public class User {
+    @Id // Entity만 사용하고 Id 없으면 다음의 오류 발생 Caused by: org.hibernate.AnnotationException:
+        // No identifier specified for entity
+    // PK
+    @GeneratedValue(strategy = GenerationType.IDENTITY) // 프로젝트에 연결된 DB의 Numbering 전략을 따라간다.
+    private int id;// Sequence, Auto-Increment
+
+    @Column(nullable = false, length = 50)
+    private String username; // ID
+
+    @Column(nullable = false, length = 100)
+    private String passwd; // 패스워드 Hash 암호화.
+
+    @Column(nullable = false, length = 50)
+    private String email; // Email 주소
+
+    //@ColumnDefault("'user'")
+    //private String role; // 추후 enum으로 변경해야 한다. //회원등급 관리 admin,user,manager
+    @Enumerated(EnumType.STRING)
+    private RoleType role; // enum ADMIN, USER
+
+    @CreationTimestamp // 시간이 자동 입력.
+    private Timestamp createDate; // 생성일자
+
+}
diff --git a/src/main/java/example/ex1/demo/Repository/UserRepository.java b/src/main/java/example/ex1/demo/Repository/UserRepository.java
new file mode 100644
index 0000000..4051772
--- /dev/null
+++ b/src/main/java/example/ex1/demo/Repository/UserRepository.java
@@ -0,0 +1,11 @@
+package example.ex1.demo.Repository;
+
+import org.springframework.data.jpa.repository.JpaRepository;
+
+import example.ex1.demo.Model.User;
+
+// DAO
+//@Repository // 자동으로 bean 등록이 된다.(생략가능하다.)
+public interface UserRepository extends JpaRepository<User, Integer> {
+
+}
diff --git a/src/main/resources/application.yml b/src/main/resources/application.yml
index 06198ce..a4113d9 100644
--- a/src/main/resources/application.yml
+++ b/src/main/resources/application.yml
@@ -17,10 +17,26 @@ spring:
 
   datasource:
     driver-class-name: com.mysql.cj.jdbc.Driver
-    url: jdbc:mysql://localhost:3306/blog?serverTimezone=Asia/Seoul&useSSL=false&characterEncoding=UTF-8
+    url: jdbc:mysql://localhost:3306/blog?serverTimezone=Asia/Seoul&useSSL=false&allowPublicKeyRetrieval=true&characterEncoding=UTF-8
     username: cos
     password: cos1234
 
+  jpa:
+    open-in-view: true
+    hibernate:
+#      ddl-auto: create
+      ddl-auto: update
+      naming:
+        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
+      use-new-id-generator-mappings: false
+    show-sql: true
+    properties:
+      hibernate.format_sql: true
+
+  jackson:
+    serialization:
+      fail-on-empty-beans: false
+
 logging:
   level:
     '[example.ex1.demo]': DEBUG
diff --git a/src/main/webapp/WEB-INF/views/dummy.jsp b/src/main/webapp/WEB-INF/views/dummy.jsp
new file mode 100644
index 0000000..74862fc
--- /dev/null
+++ b/src/main/webapp/WEB-INF/views/dummy.jsp
@@ -0,0 +1,9 @@
+<html>
+    <head>
+        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
+        <title>Spring Boot Application</title></title>
+    </head>
+    <body>
+        <h1>Welcome to Dummy Page</h1> 
+    </body>
+</html>
-- 
2.36.0.windows.1

